module MiniLisp
  def self.Fn: () { (*untyped) -> untyped } -> untyped

  def self.run: (untyped src) -> untyped

  Functions: Hash[untyped, untyped]

  VERSION: String

  module Compiler
    extend MiniLisp::Lexer

    def self.compile: (untyped ast) -> untyped
  end

  class Error < StandardError
  end

  class Evaluator
    def self.exec: (untyped code_table) -> untyped
  end

  module Lexer
    def self.tokenize: (untyped src) -> untyped

    module Token
      False: Object

      ParenBegin: Object

      ParenEnd: Object

      QuasiQuote: Object

      Quote: Object

      True: Object

      UnQuote: Object

      class Integer < Struct[untyped]
        def self.[]: (*untyped) -> untyped

        def self.inspect: () -> untyped

        def self.keyword_init?: () -> untyped

        def self.members: () -> untyped

        def self.new: (*untyped) -> untyped

        public

        def inspect: () -> untyped

        def v: () -> untyped

        def v=: (untyped _) -> untyped
      end

      class String < Struct[untyped]
        def self.[]: (*untyped) -> untyped

        def self.inspect: () -> untyped

        def self.keyword_init?: () -> untyped

        def self.members: () -> untyped

        def self.new: (*untyped) -> untyped

        public

        def inspect: () -> untyped

        def v: () -> untyped

        def v=: (untyped _) -> untyped
      end

      class Symbol < Struct[untyped]
        def self.[]: (*untyped) -> untyped

        def self.inspect: () -> untyped

        def self.keyword_init?: () -> untyped

        def self.members: () -> untyped

        def self.new: (*untyped) -> untyped

        public

        def inspect: () -> untyped

        def v: () -> untyped

        def v=: (untyped _) -> untyped
      end
    end
  end

  module Parser
    extend MiniLisp::Lexer

    def self.format: (untyped parsed, ?untyped depth) -> untyped

    def self.parse: (untyped tokens) -> untyped
  end

  class StackFrame
    alias self.[] self.new

    public

    def call_parent_num: () -> untyped

    def code_table_num: () -> untyped

    def env: () -> untyped

    def env_parent: (untyped call_stack) -> untyped

    def env_parent_num: () -> untyped

    def find_env: (untyped name, untyped call_stack) -> untyped

    def line_num: () -> untyped

    def stack: () -> untyped

    private

    def initialize: (untyped stack, untyped env, untyped line_num, untyped call_parent_num, untyped env_parent_num, untyped code_table_num) -> void
  end

  class VM
    alias self.[] self.new

    public

    def available_stack_frame_num: () -> untyped

    def change_stack_frame_num: (untyped n) -> untyped

    def current_stack_frame: () -> untyped

    def current_stack_frame_call_parent: () -> untyped

    def current_stack_frame_env_parent: () -> untyped

    def current_stack_frame_find_env: (untyped name) -> untyped

    def current_stack_frame_finish?: (untyped code_table) -> untyped

    def current_stack_frame_line_num_add: (untyped n) -> untyped

    def current_stack_frame_stack_pop: () -> untyped

    def current_stack_frame_stack_push: (untyped value) -> untyped

    def current_stack_frame_update_env: (untyped name, untyped value) -> untyped

    def gc: () -> untyped

    def insert_stack_frame: (untyped n, untyped stack_frame) -> untyped

    def stack_frame_num: () -> untyped

    def stack_frames: () -> untyped

    private

    def initialize: (untyped stack_frame_num, untyped stack_frames) -> void
  end

  module Value
    class Closure < Struct[untyped]
      def self.[]: (*untyped) -> untyped

      def self.inspect: () -> untyped

      def self.keyword_init?: () -> untyped

      def self.members: () -> untyped

      def self.new: (*untyped) -> untyped

      public

      def args: () -> untyped

      def args=: (untyped _) -> untyped

      def function_num: () -> untyped

      def function_num=: (untyped _) -> untyped

      def inspect: () -> untyped

      def stack_frame_num: () -> untyped

      def stack_frame_num=: (untyped _) -> untyped
    end

    class Cons < Struct[untyped]
      def self.[]: (*untyped) -> untyped

      def self.inspect: () -> untyped

      def self.keyword_init?: () -> untyped

      def self.members: () -> untyped

      def self.new: (*untyped) -> untyped

      public

      def head: () -> untyped

      def head=: (untyped _) -> untyped

      def inspect: () -> untyped

      def rest: () -> untyped

      def rest=: (untyped _) -> untyped

      def to_ast: () -> untyped
    end

    class Continuation < Struct[untyped]
      def self.[]: (*untyped) -> untyped

      def self.inspect: () -> untyped

      def self.keyword_init?: () -> untyped

      def self.members: () -> untyped

      def self.new: (*untyped) -> untyped

      public

      def inspect: () -> untyped

      def vm: () -> untyped

      def vm=: (untyped _) -> untyped
    end

    class False
      def self.inspect: () -> untyped

      def self.to_ast: () -> untyped

      def self.to_ruby: () -> untyped
    end

    class Function < Struct[untyped]
      def self.[]: (*untyped) -> untyped

      def self.inspect: () -> untyped

      def self.keyword_init?: () -> untyped

      def self.members: () -> untyped

      def self.new: (*untyped) -> untyped

      public

      def call: (untyped args, untyped vm) -> untyped

      def inspect: () -> untyped

      def proc: () -> untyped

      def proc=: (untyped _) -> untyped
    end

    class Nil
      def self.inspect: () -> untyped

      def self.to_ast: () -> untyped

      def self.to_ruby: () -> untyped
    end

    class Num < Struct[untyped]
      def self.[]: (*untyped) -> untyped

      def self.inspect: () -> untyped

      def self.keyword_init?: () -> untyped

      def self.members: () -> untyped

      def self.new: (*untyped) -> untyped

      public

      def inspect: () -> untyped

      def to_ast: () -> untyped

      def to_ruby: () -> untyped

      def v: () -> untyped

      def v=: (untyped _) -> untyped
    end

    class String < Struct[untyped]
      def self.[]: (*untyped) -> untyped

      def self.inspect: () -> untyped

      def self.keyword_init?: () -> untyped

      def self.members: () -> untyped

      def self.new: (*untyped) -> untyped

      public

      def inspect: () -> untyped

      def to_ast: () -> untyped

      def to_ruby: () -> untyped

      def v: () -> untyped

      def v=: (untyped _) -> untyped
    end

    class Symbol < Struct[untyped]
      def self.[]: (*untyped) -> untyped

      def self.inspect: () -> untyped

      def self.keyword_init?: () -> untyped

      def self.members: () -> untyped

      def self.new: (*untyped) -> untyped

      public

      def inspect: () -> untyped

      def to_ast: () -> untyped

      def to_ruby: () -> untyped

      def v: () -> untyped

      def v=: (untyped _) -> untyped
    end

    class True
      def self.inspect: () -> untyped

      def self.to_ast: () -> untyped

      def self.to_ruby: () -> untyped
    end
  end
end
